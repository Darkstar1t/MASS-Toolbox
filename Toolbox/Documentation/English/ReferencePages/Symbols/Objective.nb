Notebook[{
Cell[BoxData[GridBox[{
   {Cell["TOOLBOX SYMBOL", "PacletNameCell"], Cell[TextData[{
     Cell[BoxData[
      ActionMenuBox[
       FrameBox[
        InterpretationBox[Cell[TextData[{
          "Related Guides",
          StyleBox[" \[FilledDownTriangle]", "AnchorBarArrow",
           StripOnInput->False]
         }]],
         TextCell[
          Row[{"Related Guides", 
            Style[" \[FilledDownTriangle]", "AnchorBarArrow"]}]]],
        StripOnInput->False], {"\<\"Model attributes\"\>":>
       Documentation`HelpLookup["paclet:Toolbox/guide/ModelAttributes"]},
       Appearance->None,
       MenuAppearance->Automatic,
       MenuStyle->"MoreAbout"]],
      LineSpacing->{1.4, 0}],
     "\[ThickSpace]\[ThickSpace]\[ThickSpace]\[ThickSpace]\[ThickSpace]\
\[ThickSpace]",
     Cell[BoxData[
      ActionMenuBox[
       FrameBox[
        InterpretationBox[Cell[TextData[{
          "URL",
          StyleBox[" \[FilledDownTriangle]", "AnchorBarArrow",
           StripOnInput->False]
         }]],
         TextCell[
          Row[{"URL", 
            Style[" \[FilledDownTriangle]", "AnchorBarArrow"]}]]],
        StripOnInput->False], {"\<\"Toolbox/ref/Constraints\"\>":>
       None, "\<\"Copy Wolfram Documentation Center URL\"\>":>
       Module[{DocumentationSearch`Private`nb$}, 
        DocumentationSearch`Private`nb$ = NotebookPut[
           Notebook[{
             Cell["Toolbox/ref/Constraints"]}, Visible -> False]]; 
        SelectionMove[DocumentationSearch`Private`nb$, All, Notebook]; 
        FrontEndTokenExecute[DocumentationSearch`Private`nb$, "Copy"]; 
        NotebookClose[DocumentationSearch`Private`nb$]; Null], 
       Delimiter, "\<\"Copy web URL\"\>":>
       Module[{DocumentationSearch`Private`nb$}, 
        DocumentationSearch`Private`nb$ = NotebookPut[
           Notebook[{
             Cell[
              BoxData[
               MakeBoxes[
                Hyperlink[
                "http://reference.wolfram.com/language/Toolbox/ref/\
Constraints.html"], StandardForm]], "Input", TextClipboardType -> 
              "PlainText"]}, Visible -> False]]; 
        SelectionMove[DocumentationSearch`Private`nb$, All, Notebook]; 
        FrontEndTokenExecute[DocumentationSearch`Private`nb$, "Copy"]; 
        NotebookClose[DocumentationSearch`Private`nb$]; 
        Null], "\<\"Go to web URL\"\>":>FrontEndExecute[{
         NotebookLocate[{
           URL[
            StringJoin[
             If[
              TrueQ[DocumentationBuild`Make`Private`wsmlinkQ$39373], 
              "http://reference.wolfram.com/system-modeler/", 
              "http://reference.wolfram.com/language/"], 
             "Toolbox/ref/Constraints", ".html"]], None}]}]},
       Appearance->None,
       MenuAppearance->Automatic,
       MenuStyle->"URLMenu"]],
      LineSpacing->{1.4, 0}]
    }], "AnchorBar"]}
  }]], "AnchorBarGrid",
 GridBoxOptions->{GridBoxItemSize->{"Columns" -> {
     Scaled[0.65], {
      Scaled[0.34]}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
   "RowsIndexed" -> {}}},
 CellID->1],

Cell[TextData[{
 Cell["Objective", "ObjectName"],
 Cell[BoxData[
  InterpretationBox[
   StyleBox[
    GraphicsBox[{},
     BaselinePosition->Baseline,
     ImageSize->{8, 0}],
    CacheGraphics->False],
   Spacer[8]]]],
 Cell[BoxData[""], "ObjectNameTranslation"]
}], "ObjectNameGrid"],

Cell[BoxData[GridBox[{
   {"", Cell[TextData[{
     Cell[BoxData["Objective"], "InlineFormula"],
     " \[LineSeparator]specifies either a single flux or a sum of fluxes that \
will be optimized if the the model is used in COBRA related methods."
    }]]}
  }]], "Usage",
 GridBoxOptions->{
 GridBoxBackground->{
  "Columns" -> {{None}}, "ColumnsIndexed" -> {}, "Rows" -> {{None}}, 
   "RowsIndexed" -> {}}},
 CellID->982511436],

Cell[CellGroupData[{

Cell["", "PrimaryExamplesSection",
 WholeCellGroupOpener->True,
 CellElementSpacings->{"CellMinHeight"->3},
 CellFrameLabels->{{
    FEPrivate`If[
     FEPrivate`Or[
      FEPrivate`SameQ[FEPrivate`$ProductVersion, "6.0"], 
      FEPrivate`SameQ[FEPrivate`$ProductVersion, "7.0"], 
      FEPrivate`SameQ[FEPrivate`$ProductVersion, "8.0"]], 
     Cell[
      TextData[{
        Cell[
         BoxData[
          InterpretationBox[
           StyleBox[
            
            GraphicsBox[{}, BaselinePosition -> Baseline, 
             ImageSize -> {6, 0}], CacheGraphics -> False], 
           Spacer[6]]]], "Examples", "\[NonBreakingSpace]\[NonBreakingSpace]", 
        Cell["(2)", "ExampleCount"]}], "PrimaryExamplesSection", 
      CellSize -> {5000, Inherited}], 
     TextData[{
       Cell[
        BoxData[
         InterpretationBox[
          StyleBox[
           GraphicsBox[{}, BaselinePosition -> Baseline, ImageSize -> {6, 0}],
            CacheGraphics -> False], 
          Spacer[6]]]], "Examples", "\[NonBreakingSpace]\[NonBreakingSpace]", 
       
       Cell["(2)", "ExampleCount"]}]], None}, {None, None}},
 CellFrameLabelMargins->0,
 CellSize->{Inherited, 
   FEPrivate`If[
    FEPrivate`Or[
     FEPrivate`SameQ[FEPrivate`$ProductVersion, "6.0"], 
     FEPrivate`SameQ[FEPrivate`$ProductVersion, "7.0"], 
     FEPrivate`SameQ[FEPrivate`$ProductVersion, "8.0"]], 11, 14]},
 CellTags->"PrimaryExamplesSection",
 CellID->85250824],

Cell[CellGroupData[{

Cell[TextData[{
 "Basic Examples",
 "\[NonBreakingSpace]\[NonBreakingSpace]",
 Cell["(1)", "ExampleCount"]
}], "ExampleSection", "ExampleSection",
 WholeCellGroupOpener->True,
 CellID->439006419],

Cell[BoxData[{
 RowBox[{"Needs", "[", "\"\<Toolbox`Style`\>\"", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Needs", "[", "\"\<Toolbox`\>\"", "]"}]}], "Input",
 CellLabel->"In[1]:=",
 CellID->1442699638],

Cell[BoxData[
 RowBox[{
  RowBox[{"model", "=", 
   RowBox[{"ExampleData", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<Toolbox\>\"", ",", "\"\<EcoliCore\>\""}], "}"}], "]"}]}], 
  ";"}]], "Input",
 CellLabel->"In[2]:=",
 CellID->442561503],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"model", "[", "\"\<Objective\>\"", "]"}]], "Input",
 CellLabel->"In[3]:=",
 CellID->1511424650],

Cell[BoxData[
 InterpretationBox[
  SubscriptBox[
   StyleBox["v",
    StripOnInput->False,
    ShowSyntaxStyles->False,
    AutoSpacing->False,
    ZeroWidthTimes->True,
    FontColor->RGBColor[0, 0, 0],
    $CellContext`LineColor -> RGBColor[0, 0, 0],
    $CellContext`FrontFaceColor -> RGBColor[0, 0, 0],
    $CellContext`BackFaceColor -> RGBColor[0, 0, 0],
    $CellContext`GraphicsColor -> RGBColor[0, 0, 0]], 
   StyleBox[
    RowBox[{"Biomass_Ecoli", "_core", "_N", 
     RowBox[{"(", 
      RowBox[{"w", "/", "GAM"}], ")"}], "_Nmet2"}],
    StripOnInput->False,
    ShowSyntaxStyles->False,
    AutoSpacing->False,
    ZeroWidthTimes->True,
    FontColor->RGBColor[0, 0, 0],
    $CellContext`LineColor -> RGBColor[0, 0, 0],
    $CellContext`FrontFaceColor -> RGBColor[0, 0, 0],
    $CellContext`BackFaceColor -> RGBColor[0, 0, 0],
    $CellContext`GraphicsColor -> RGBColor[0, 0, 0]]],
  Toolbox`v["Biomass_Ecoli_core_N(w/GAM)_Nmet2"],
  Editable->False,
  Selectable->False]], "Output",
 ImageSize->{188, 18},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[3]=",
 CellID->2077515834]
}, Open  ]],

Cell["Access the objective attribute of the model", "ExampleText",
 CellID->1993685104],

Cell[BoxData[
 RowBox[{
  RowBox[{"obj", "=", 
   RowBox[{"model", "[", "\"\<Constraints\>\"", "]"}]}], ";"}]], "Input",
 CellLabel->"In[4]:=",
 CellID->58802377],

Cell["Set new constraints for model (discard old ones)", "ExampleText",
 CellID->2034867197],

Cell[BoxData[
 RowBox[{"setObjective", "[", 
  RowBox[{"model", ",", 
   InterpretationBox[
    SubscriptBox[
     StyleBox["v",
      StripOnInput->False,
      ShowSyntaxStyles->False,
      AutoSpacing->False,
      ZeroWidthTimes->True,
      FontColor->RGBColor[0, 0, 0],
      $CellContext`LineColor -> RGBColor[0, 0, 0],
      $CellContext`FrontFaceColor -> RGBColor[0, 0, 0],
      $CellContext`BackFaceColor -> RGBColor[0, 0, 0],
      $CellContext`GraphicsColor -> RGBColor[0, 0, 0]], 
     StyleBox["ATPM",
      StripOnInput->False,
      ShowSyntaxStyles->False,
      AutoSpacing->False,
      ZeroWidthTimes->True,
      FontColor->RGBColor[0, 0, 0],
      $CellContext`LineColor -> RGBColor[0, 0, 0],
      $CellContext`FrontFaceColor -> RGBColor[0, 0, 0],
      $CellContext`BackFaceColor -> RGBColor[0, 0, 0],
      $CellContext`GraphicsColor -> RGBColor[0, 0, 0]]],
    Toolbox`v["ATPM"],
    Editable->False,
    Selectable->False]}], "]"}]], "Input",
 CellLabel->"In[5]:=",
 CellID->1335901504],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"getObjective", "[", "model", "]"}]], "Input",
 CellLabel->"In[6]:=",
 CellID->555048343],

Cell[BoxData[
 InterpretationBox[
  SubscriptBox[
   StyleBox["v",
    StripOnInput->False,
    ShowSyntaxStyles->False,
    AutoSpacing->False,
    ZeroWidthTimes->True,
    FontColor->RGBColor[0, 0, 0],
    $CellContext`LineColor -> RGBColor[0, 0, 0],
    $CellContext`FrontFaceColor -> RGBColor[0, 0, 0],
    $CellContext`BackFaceColor -> RGBColor[0, 0, 0],
    $CellContext`GraphicsColor -> RGBColor[0, 0, 0]], 
   StyleBox["ATPM",
    StripOnInput->False,
    ShowSyntaxStyles->False,
    AutoSpacing->False,
    ZeroWidthTimes->True,
    FontColor->RGBColor[0, 0, 0],
    $CellContext`LineColor -> RGBColor[0, 0, 0],
    $CellContext`FrontFaceColor -> RGBColor[0, 0, 0],
    $CellContext`BackFaceColor -> RGBColor[0, 0, 0],
    $CellContext`GraphicsColor -> RGBColor[0, 0, 0]]],
  Toolbox`v["ATPM"],
  Editable->False,
  Selectable->False]], "Output",
 ImageSize->{34, 16},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[6]=",
 CellID->724034355]
}, Open  ]],

Cell["Updating an objective has the same effect as setting it.", "ExampleText",
 CellID->2135510272],

Cell[BoxData[
 RowBox[{"updateObjective", "[", 
  RowBox[{"model", ",", 
   InterpretationBox[
    SubscriptBox[
     StyleBox["v",
      StripOnInput->False,
      ShowSyntaxStyles->False,
      AutoSpacing->False,
      ZeroWidthTimes->True,
      FontColor->RGBColor[0, 0, 0],
      $CellContext`LineColor -> RGBColor[0, 0, 0],
      $CellContext`FrontFaceColor -> RGBColor[0, 0, 0],
      $CellContext`BackFaceColor -> RGBColor[0, 0, 0],
      $CellContext`GraphicsColor -> RGBColor[0, 0, 0]], 
     StyleBox[
      RowBox[{"Biomass_Ecoli", "_core", "_N", 
       RowBox[{"(", 
        RowBox[{"w", "/", "GAM"}], ")"}], "_Nmet2"}],
      StripOnInput->False,
      ShowSyntaxStyles->False,
      AutoSpacing->False,
      ZeroWidthTimes->True,
      FontColor->RGBColor[0, 0, 0],
      $CellContext`LineColor -> RGBColor[0, 0, 0],
      $CellContext`FrontFaceColor -> RGBColor[0, 0, 0],
      $CellContext`BackFaceColor -> RGBColor[0, 0, 0],
      $CellContext`GraphicsColor -> RGBColor[0, 0, 0]]],
    Toolbox`v["Biomass_Ecoli_core_N(w/GAM)_Nmet2"],
    Editable->False,
    Selectable->False]}], "]"}]], "Input",
 CellLabel->"In[7]:=",
 CellID->626949193],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"getObjective", "[", "model", "]"}]], "Input",
 CellLabel->"In[8]:=",
 CellID->1367443127],

Cell[BoxData[
 InterpretationBox[
  SubscriptBox[
   StyleBox["v",
    StripOnInput->False,
    ShowSyntaxStyles->False,
    AutoSpacing->False,
    ZeroWidthTimes->True,
    FontColor->RGBColor[0, 0, 0],
    $CellContext`LineColor -> RGBColor[0, 0, 0],
    $CellContext`FrontFaceColor -> RGBColor[0, 0, 0],
    $CellContext`BackFaceColor -> RGBColor[0, 0, 0],
    $CellContext`GraphicsColor -> RGBColor[0, 0, 0]], 
   StyleBox[
    RowBox[{"Biomass_Ecoli", "_core", "_N", 
     RowBox[{"(", 
      RowBox[{"w", "/", "GAM"}], ")"}], "_Nmet2"}],
    StripOnInput->False,
    ShowSyntaxStyles->False,
    AutoSpacing->False,
    ZeroWidthTimes->True,
    FontColor->RGBColor[0, 0, 0],
    $CellContext`LineColor -> RGBColor[0, 0, 0],
    $CellContext`FrontFaceColor -> RGBColor[0, 0, 0],
    $CellContext`BackFaceColor -> RGBColor[0, 0, 0],
    $CellContext`GraphicsColor -> RGBColor[0, 0, 0]]],
  Toolbox`v["Biomass_Ecoli_core_N(w/GAM)_Nmet2"],
  Editable->False,
  Selectable->False]], "Output",
 ImageSize->{188, 18},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[8]=",
 CellID->1203060583]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Scope",
 "\[NonBreakingSpace]\[NonBreakingSpace]",
 Cell["(1)", "ExampleCount"]
}], "ExampleSection", "ExampleSection",
 WholeCellGroupOpener->True,
 CellID->1293636265],

Cell["Optimize the objective stored in the model:", "ExampleText",
 CellID->971007095],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"fba", "[", 
  RowBox[{"model", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      InterpretationBox[
       SubscriptBox[
        StyleBox["v",
         StripOnInput->False,
         ShowSyntaxStyles->False,
         AutoSpacing->False,
         ZeroWidthTimes->True,
         FontColor->RGBColor[0, 0, 0],
         $CellContext`LineColor -> RGBColor[0, 0, 0],
         $CellContext`FrontFaceColor -> RGBColor[0, 0, 0],
         $CellContext`BackFaceColor -> RGBColor[0, 0, 0],
         $CellContext`GraphicsColor -> RGBColor[0, 0, 0]], 
        StyleBox[
         RowBox[{"EX_glc", 
          RowBox[{"(", "e", ")"}]}],
         StripOnInput->False,
         ShowSyntaxStyles->False,
         AutoSpacing->False,
         ZeroWidthTimes->True,
         FontColor->RGBColor[0, 0, 0],
         $CellContext`LineColor -> RGBColor[0, 0, 0],
         $CellContext`FrontFaceColor -> RGBColor[0, 0, 0],
         $CellContext`BackFaceColor -> RGBColor[0, 0, 0],
         $CellContext`GraphicsColor -> RGBColor[0, 0, 0]]],
       Toolbox`v["EX_glc(e)"]], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "\[Infinity]"}], ",", "20"}], "}"}]}], ",", 
     RowBox[{
      InterpretationBox[
       SubscriptBox[
        StyleBox["v",
         StripOnInput->False,
         ShowSyntaxStyles->False,
         AutoSpacing->False,
         ZeroWidthTimes->True,
         FontColor->RGBColor[0, 0, 0],
         $CellContext`LineColor -> RGBColor[0, 0, 0],
         $CellContext`FrontFaceColor -> RGBColor[0, 0, 0],
         $CellContext`BackFaceColor -> RGBColor[0, 0, 0],
         $CellContext`GraphicsColor -> RGBColor[0, 0, 0]], 
        StyleBox[
         RowBox[{"EX_o2", 
          RowBox[{"(", "e", ")"}]}],
         StripOnInput->False,
         ShowSyntaxStyles->False,
         AutoSpacing->False,
         ZeroWidthTimes->True,
         FontColor->RGBColor[0, 0, 0],
         $CellContext`LineColor -> RGBColor[0, 0, 0],
         $CellContext`FrontFaceColor -> RGBColor[0, 0, 0],
         $CellContext`BackFaceColor -> RGBColor[0, 0, 0],
         $CellContext`GraphicsColor -> RGBColor[0, 0, 0]]],
       Toolbox`v["EX_o2(e)"]], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "\[Infinity]"}], ",", "10"}], "}"}]}], ",", 
     RowBox[{
      InterpretationBox[
       SubscriptBox[
        StyleBox["v",
         StripOnInput->False,
         ShowSyntaxStyles->False,
         AutoSpacing->False,
         ZeroWidthTimes->True,
         FontColor->RGBColor[0, 0, 0],
         $CellContext`LineColor -> RGBColor[0, 0, 0],
         $CellContext`FrontFaceColor -> RGBColor[0, 0, 0],
         $CellContext`BackFaceColor -> RGBColor[0, 0, 0],
         $CellContext`GraphicsColor -> RGBColor[0, 0, 0]], 
        StyleBox[
         RowBox[{"EX_nh4", 
          RowBox[{"(", "e", ")"}]}],
         StripOnInput->False,
         ShowSyntaxStyles->False,
         AutoSpacing->False,
         ZeroWidthTimes->True,
         FontColor->RGBColor[0, 0, 0],
         $CellContext`LineColor -> RGBColor[0, 0, 0],
         $CellContext`FrontFaceColor -> RGBColor[0, 0, 0],
         $CellContext`BackFaceColor -> RGBColor[0, 0, 0],
         $CellContext`GraphicsColor -> RGBColor[0, 0, 0]]],
       Toolbox`v["EX_nh4(e)"]], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "\[Infinity]"}], ",", "\[Infinity]"}], "}"}]}], ",", 
     RowBox[{
      InterpretationBox[
       SubscriptBox[
        StyleBox["v",
         StripOnInput->False,
         ShowSyntaxStyles->False,
         AutoSpacing->False,
         ZeroWidthTimes->True,
         FontColor->RGBColor[0, 0, 0],
         $CellContext`LineColor -> RGBColor[0, 0, 0],
         $CellContext`FrontFaceColor -> RGBColor[0, 0, 0],
         $CellContext`BackFaceColor -> RGBColor[0, 0, 0],
         $CellContext`GraphicsColor -> RGBColor[0, 0, 0]], 
        StyleBox[
         RowBox[{"EX_pi", 
          RowBox[{"(", "e", ")"}]}],
         StripOnInput->False,
         ShowSyntaxStyles->False,
         AutoSpacing->False,
         ZeroWidthTimes->True,
         FontColor->RGBColor[0, 0, 0],
         $CellContext`LineColor -> RGBColor[0, 0, 0],
         $CellContext`FrontFaceColor -> RGBColor[0, 0, 0],
         $CellContext`BackFaceColor -> RGBColor[0, 0, 0],
         $CellContext`GraphicsColor -> RGBColor[0, 0, 0]]],
       Toolbox`v["EX_pi(e)"]], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "\[Infinity]"}], ",", "\[Infinity]"}], "}"}]}], ",", 
     RowBox[{
      InterpretationBox[
       SubscriptBox[
        StyleBox["v",
         StripOnInput->False,
         ShowSyntaxStyles->False,
         AutoSpacing->False,
         ZeroWidthTimes->True,
         FontColor->RGBColor[0, 0, 0],
         $CellContext`LineColor -> RGBColor[0, 0, 0],
         $CellContext`FrontFaceColor -> RGBColor[0, 0, 0],
         $CellContext`BackFaceColor -> RGBColor[0, 0, 0],
         $CellContext`GraphicsColor -> RGBColor[0, 0, 0]], 
        StyleBox["ATPM",
         StripOnInput->False,
         ShowSyntaxStyles->False,
         AutoSpacing->False,
         ZeroWidthTimes->True,
         FontColor->RGBColor[0, 0, 0],
         $CellContext`LineColor -> RGBColor[0, 0, 0],
         $CellContext`FrontFaceColor -> RGBColor[0, 0, 0],
         $CellContext`BackFaceColor -> RGBColor[0, 0, 0],
         $CellContext`GraphicsColor -> RGBColor[0, 0, 0]]],
       Toolbox`v["ATPM"]], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"7.6", ",", "7.6"}], "}"}]}]}], "}"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  InterpretationBox[
   SubscriptBox[
    StyleBox["v",
     StripOnInput->False,
     ShowSyntaxStyles->False,
     AutoSpacing->False,
     ZeroWidthTimes->True,
     FontColor->RGBColor[0, 0, 0],
     $CellContext`LineColor -> RGBColor[0, 0, 0],
     $CellContext`FrontFaceColor -> RGBColor[0, 0, 0],
     $CellContext`BackFaceColor -> RGBColor[0, 0, 0],
     $CellContext`GraphicsColor -> RGBColor[0, 0, 0]], 
    StyleBox[
     RowBox[{"Biomass_Ecoli", "_core", "_N", 
      RowBox[{"(", 
       RowBox[{"w", "/", "GAM"}], ")"}], "_Nmet2"}],
     StripOnInput->False,
     ShowSyntaxStyles->False,
     AutoSpacing->False,
     ZeroWidthTimes->True,
     FontColor->RGBColor[0, 0, 0],
     $CellContext`LineColor -> RGBColor[0, 0, 0],
     $CellContext`FrontFaceColor -> RGBColor[0, 0, 0],
     $CellContext`BackFaceColor -> RGBColor[0, 0, 0],
     $CellContext`GraphicsColor -> RGBColor[0, 0, 0]]],
   Toolbox`v["Biomass_Ecoli_core_N(w/GAM)_Nmet2"]], "/.", "%"}]}], "Input",
 CellLabel->"In[1]:=",
 CellID->988012112],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzsvT2vvE6U54ftxKHfgt8AsVMyO0Jay4lVya48rJyM0aylFSkZIRkZERER
EREJEQkJsoxXImBHYgJGYiQSAoJ2nSqeKbqhm3689f1Lv/+9XBrqHE49Un0+
/+N/+L/+nfLfCoLwn/57/M+/+/f/Wfqnf/r32v/6P+Bf/rd//E//53/8x3/4
P/6Xf/y//+E//sM//U//4b/DB//3/0YQ/md8Pvx84eLi4uLi+k3VkWPaYfHu
YnBxcXFxcZ2gUJdVOyzr9t0F4eLi4uLielylqVjVuwvBxcXFxcV1kipLtcp3
F+JBFbGrSAKWhPQwb66fXGe+Kov4ZFHWwrwmx5o8jRxDVXR/8uEqsDSRXFW3
I3q8yTwkyaiToihI97JnWfUutYWtUm9qUfn7s/gichB5zLJqpfW1gxsqPUOB
U0Xkxl1NSl1NkuUhTBDSE3oRlm+P3Os7dSCiGM7ElU7pq5wsyU7nI0b1HNWk
BkLuwpvzg02ZWKpM7iVbfnqGnZ+nv+v57+/X2hQJgu5GRZG5On6ISnrlAZYB
fiKy6aVZ6upIdYhXm0QVsfCDMoepa2pjzytBWuSxCxd1Sf9VZ4EfgMLItyAM
nOTHWqLGw2ZJRpxlHjhTy99doKeqzV38EA0/KYrEwmEkO83Gwa0LBBqunnqc
F4mn4095OQRflUZ9mIQGtCs6eXvN8O2Re32p9kcU25l1bAoC8sIQHOoHaQUH
2dWzU2UjaDXNuNo+2Pq4VKqdYr/7+PqC9WsV+fK3PT/r16rYwl3oUKbYQshO
nnDTK2qTILy7n21TGz+eaNtPsSkKirfxWexkc/xoW9d9E5NakqBH89Mb/HiR
vWuw8QFeXWjbyU2CY9Xr/par2CP3Rt07rL4neKqqe8xNjGt0N7BhHmSJuqg7
OdQE0ZzbWIeSIHoFGWlt+Hb3vSZl/s2IYjuzTkxBtJZj1e3qGZnY5bqtyUZU
XT/Yq8J+1xnHGeKef5fnD6q2VHN0S5PIQwdKfrbTvtKN1oDausyyvGomB6px
6wk+eeqNpq6qsqz2bU3JfQ13GEcb0zIJbBOPOQTFjrfPqnG3pnmhoyuyjHQ7
mDqUDE5M1n0r/CnkzLqwKsQPRNu7hfQDvLrQlpObDA8MzLJONQkFReUhgRWN
+3Sf1W3TdAa1VXm4S70veKhSPKyUlp9lHpyoMvDY0ycD4TY38JRfnY6aWjxg
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
Kpr98YdFLsu67kO4W3KQUEknATidry1B0mRcCtU1w12485Rd0xsO3EB1HTJ/
WB3K8IgUuazrTQbe8IElxxlP3/A8nPiviGLSAH8GefkwH3yK5yZPuaErdYKI
YyHURLraEOH2et6HHhWpJeyF031PmR35h6DSzHs95DGi6UrLwmPjCGoy4Q1U
2Z6s1gEWVhn3AzDXbc7VlWfBWFJhNm8P6+sw1q/UjNnaZCYS6RrB1fehP6jH
cbeXOXob1EQjJ3oJkiYLO7BTRtS992/fPWp+DatDwIwWZX2DEUZemosdt/q/
rDjO+ARX68a9/c6Q95OX7+CDz/DcdQ/Lhi8ukSF3nah0miMZP/mVr0c9Ro7N
Ks7cYwPC+1KPIHKypwWHn2QERZOQCSYBS0sqXHBZDX9RHGN9W3Nm6/7N1b+k
c3C3X6sHqbj3YZcvLP+99234s/jgv1uj3uaxX6l694ljrLm4ni6OXebi4uLi
4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi+i41ZRJ6
uqJMedZNHmokX6KkmLe+d7uXMHvGvT5DP0F5vq2/YSaTQL0/JtsyMUnOe1FS
3GSaFS13dJokTDb9nmLIBlt/P+36b4TKbXE/fIzqxKYpBEaedZMSjrFflBlN
s3otC+B+wuzj9/oI/QTl+bb+hJlsAvWBmIS08ILmZAXuHlWgCvap2SC/r6iH
SRb7piSbNLkqE2z9/bTrPxEqO8T9MNMH0H4bXD2Nvq8BMJag9+XJlB1EpyOE
2UfvdXmvx76J8nxTf95MFoH6UEy2Yw6WkXbdZo4wIniGU1lg66+hXf+RULmp
V/jhR7QBfW7qKdOZCXFu631Q51vkWSBpDn0NSRsudUSmDEiC4/Rq6/MHCLOP
3ot87C6P9SDpPVk33kd5XlqBVeVZXvRl2WHFN8CsTzDzcildw9yz4HOMaX5f
TEK2bZF2UIWv4tsFnolkWdGsDizFBFufSbtmxX+Ff+yXO/v6sOsWK31OqKzt
6qnd9+fvWuLit/UKP/yKWNBnaP9FBEhnYDrTXxUVSSIyo+4xwrBQ8Fmjh4NM
51lfAyRrs+OHiJIs7OnXjhBmH7wX1R0eI+NwUdUU3JJY0dITn0J5XlrR+ppE
kjILshVdBitUBXIO09yq3wizftRMqsrVDSbo8xGm+T0xSZYuB3Y82CsIiull
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
poN7tREOPnXXqsm65p7PiQootl7gHqstDBEbW5C3/qZjqbDv0CMw3Kifmd7W
rrZ3ANFu2UWZrUMjS7/sAOOKqcjQi93GXmApU+uPIzOkBdpqY2/68G6tYOXH
WPOnCJY79k7zCa988facfJ758fVb+I17tTWTg36P2ET1O/QQdJ60DNHywzXr
4B16FjV+hxUlnsENbcVjepYVpKbEdNcuWdsPJdHIcddcJYqAkoauvNV0YxJy
s7FmNWNfRn7uln3avF+HrIL+pcy52gjajY0qT/UG+dC8X8MnJO0lx/0y2L50
16rJekwvi4qoW5Xt1iFr+C5rFEc+njUqfkqG6KUvI+ep36PbWl/dSW3dOrNh
+JDdxh7y4X4tYOXVQdY815P0IHS+ohB5iSxziCpuNprUkURY8sD/qK/afX26
FYlN3kvLkFFTddJb1ztHR60YakoZaHhw+188FVldUWE3QlzBKw+yuIrHrvW0
ZtXU6kvqaOT7QvA1R7t/8y5CtRStx9YBHtezvUE/ZMlo0q8h+oofN4FaUCzd
tWqyXqMH/VD3z5p04mjczdXCKmX/W2lR29j71r5eR33I9e36Dd46t+JMfQYk
+VO88W69zA9n7az4QPFY4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi
4uLi4uLi4uLi4nq/9oI4v1NM65gnZp6COsmS7MD5tavhH7uDCpYGKa9TV5Pk
8ShCOs13wqZDfh25j+WxJg81BPEgKeZNRzJYh5cqsGi2A0m3J9/nfvReHyHm
c99vRVsmJqHq4ghxk2lekdzRaZIJ2fQHNBaLDsk++MF69LkzIZuXqkgD11SQ
nk488HXhxHWK7gRxfolY1m2cCTnZkBeGAZYfpATEkUYBURiFDlQNE76/WaWR
3x8ltUsvtumQTyX3PUMMjzUpCQe/KDOayPDaN5BZrMMUvrWtBGmRx5AzVhlS
GD14rw8Q+7kfsAJS/wmakxW4e4RMTX06JZIRTtTDJIt9U5K77/+y6JDsg5+s
B587G7IJeVEADTxDY3xbOP2SPoAr+kQQ58dZtyGoLKK11SIUvsrIlgZgC9Hr
mREMOuRd5L5P8xgBeeh9eTJlIFhducGCdTgBfKW4vZ6lfXv0Xpd3e2z93A9Z
0Y5f7x2wvEAKEMYk9sOpLDokGxl5Q18dY1cgm/i2EiGa3XFZrpPFpN2RX4os
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
t3iqwucapHLp+JJNy82wWB3IFmZlFR6+WfNv8T6KC3+YyX7QQzZf6/s1T9Xi
duMhiG2UZUPwIjGsQbHzwenG5P+Uhy2d29hDv6Y4DT28f45G+zVt2p/A9s+0
6J06uzioe56u0P3pcB6+ieavtUjw5gitwuOTl6/w//Sqyx5OUWt6r8ZElMUM
5Su8OkOH/T+uG2D3eZ/ebUaSZODlPoyG/yAu/GuZ7A86sPWQDTK7x1NADx/Q
B1n0Tr2nOMh9lvkX+H+2V23C16zIvXN8gVdn6LX+i3UE7P5kCr+WC48ePq/n
PRz0ay16p54ojj/n/8arLvcN96Hvxf6cVygUCoVCoVAoFAqFQqFQKBQKhUKh
UCgUCoVCoVAfIFLFjhs+GbYQhUKhUKhPEWmLGKg074FEoFAoFAr1BsW2Ef3W
759Rny9Evf+DfqtpvzVfK/2RbL5WB00bgzSiUG8Xot7/Qb/VtN+ar5X+SDZf
q8OmYb/2+fo2iPlK+0zz16Hev9yirX6rab81Xyv9kWy+Vq80Dfu1L9B5EPO3
aI9p/krU+5dbtNXPmQZqqrIo++Uesoyd3jbt8m8yUT7q+65+Tr6uq6D6pOM1
pSOLf87XvMCKx+rNt9b5rnAMwzABg/aPV/WEXmga7df2Yr+jPkdnQcwf0HlM
89ei3n/Qoq2+2LRr6+uypGiGJismYH8TS5mNfTtP6bG5dURbofDaxIYFscpz
X5M0X9AofWi+eBx7CFvPEcZwAZIMKHR6QFIz/qli6OqATiOJq9P9VVk2fMG0
6FOy+Wydp71fHRqydfyqPqrO577JoK5HM4F6r14NMe9oM2Rx2hqJLAMYdl1m
6rbnGLTyaCOc7lSm+U3U+x736jzOO/09sDSG6FCBY9ilhs5Gj13W/3ElsWvI
MtB6OOiwil2F/dvwkulE32xaQbsnM57vskJIMzij1VwrQ5LhlbMmtty0Tnvs
8vfki/Qzr9Ln1OCWUYj6Lar/38g/BZg1ALboPIgdkOuyvV0u+5BsHq/zUKUV
2r8DNdrgk79ZiXe+rvfs7uqim0Af+4o6z5gyygU/Y/t4vRpiXpmcMcSwxTVL
EEZ6Xkpm2IqT+e+7qPct0/x6Puf92tJWQofsdnVZdxMxkI6B2R/VxaCtdw0k
3zwrW1KF9Brh7SxSp+l05361aQkwgVvIq++HEbQlq34NDqGtJO37e4xaqgO9
i46y80ey9Tn5oklYKgB++Sol3CCqm2axDfPOYuKfwp2ijJRzttsD5MTvqfN0
/k33SxhSk2+blzidlXMf6Ea6w1fU+St7z38Lpkd9oF4OMa9CQwtKWm/pXTwk
aK+G3Cfz33dR7xumOUvoZM47PLkObXoKRbOSsp0I713vTGLRIfzUwLTs39tU
vto0mif25U8TeQafp2z7NTaFUXsnYDikXPLkBs32M/MFJ6zKxDdlHfoptvCo
0SlDGEPtmPo1kql0tMMvuaG9gBLdb6O/p84DQ1OLitxRhkd16xIvDUkvSGXK
RvEldf6K7418r56HmJPcUGj90/vmaGzGZ3oL/12MehcuL5zKeafTtJqPL6GJ
s1s6lJVteLJS+LxhyT1VMvnibVvVbZfTe8riDtTVNMr8atNY884zlfJZKmvl
lj1WNzO2iU02cYOFPiteJ3dY78pXW6Y5ax5Zt0Xb/HZceOz37/9ZhIakBXD2
hnYQclC8ZGnrc+p8ZqqG5/tRNnUWtO+al3jhGyptJhxw41vqPPZr36pXQMyh
odaHBQrWWK3qwkcxzc/mvJMq0mRZ1XVNUayQDk5rlx2v6YZusJySytVlvspj
wg7wLgHdg45MFfMytjzfbdqVxA4b4NNRN1v5ydzeRVk2+vWfLtHGqkL7NYev
19GB/SNzmdfo2Xw1mUmnXrRkJMkMYAV1WtBgYvcLlKysWux2aem9AlMDTZUl
xRdiI0/Q2XW+f/pgGLTWG3bAO6oGJkE0jaG4SU6zHvZ07S+o81fs136pHoOY
N54mu3e+BPkgpvnZnHeubjkmbNv1GckKNTzzZND3m9Z1gpHxJ+kl+epE4/+P
0tl1vklsjTOgu5x2cNFYa2c+NZknq97iIj67zl9h/mi+bYiFep/uQszrmM5N
TO8+1vzXMs03Fr1Qv9Y01FdrW+frRFdgRUJTVStIRQt6uvxY6KpPqvOlpe49
Q0ehUCgU6pvUFaEqKW586vepKBQKhUKhUCgUCoVCfb3+B6pzoPM=
    "], {{0, 346}, {584, 
    0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{584, 346},
  PlotRange->{{0, 584}, {0, 346}}]], "Output",
 ImageSize->{588, 346},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellTags->"RasterizedOutput",
 CellLabel->"Out[1]=",
 CellID->721365680],

Cell[BoxData["0.8827911114867675`"], "Output",
 ImageSize->{62, 16},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[1]=",
 CellID->193376751]
}, Open  ]]
}, Closed]],

Cell["", "SectionFooterSpacer"],

Cell["", "SectionFooterSpacer",
 Editable->False,
 Selectable->False,
 Deletable->False,
 ShowCellBracket->False,
 ShowSelection->False,
 CellMargins->FEPrivate`If[
   FEPrivate`Or[
    FEPrivate`SameQ[FEPrivate`$ProductVersion, "6.0"], 
    FEPrivate`SameQ[FEPrivate`$ProductVersion, "7.0"], 
    FEPrivate`SameQ[FEPrivate`$ProductVersion, "8.0"]], 0, Inherited],
 CellElementSpacings->{"CellMinHeight"->FEPrivate`If[
   FEPrivate`Or[
    FEPrivate`SameQ[FEPrivate`$ProductVersion, "6.0"], 
    FEPrivate`SameQ[FEPrivate`$ProductVersion, "7.0"], 
    FEPrivate`SameQ[FEPrivate`$ProductVersion, "8.0"]], 1, Inherited]},
 CellSize->FEPrivate`If[
   FEPrivate`Or[
    FEPrivate`SameQ[FEPrivate`$ProductVersion, "6.0"], 
    FEPrivate`SameQ[FEPrivate`$ProductVersion, "7.0"], 
    FEPrivate`SameQ[FEPrivate`$ProductVersion, "8.0"]], {Inherited, 1}, 
   Inherited]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "MoreAboutSection",
 WholeCellGroupOpener->True,
 CellElementSpacings->{"CellMinHeight"->3},
 CellFrameLabels->{{
    FEPrivate`If[
     FEPrivate`Or[
      FEPrivate`SameQ[FEPrivate`$ProductVersion, "6.0"], 
      FEPrivate`SameQ[FEPrivate`$ProductVersion, "7.0"], 
      FEPrivate`SameQ[FEPrivate`$ProductVersion, "8.0"]], 
     Cell[
      TextData[{
        Cell[
         BoxData[
          InterpretationBox[
           StyleBox[
            
            GraphicsBox[{}, BaselinePosition -> Baseline, 
             ImageSize -> {6, 0}], CacheGraphics -> False], 
           Spacer[6]]]], "Related Guides"}], "MoreAboutSection", 
      CellSize -> {5000, Inherited}], 
     TextData[{
       Cell[
        BoxData[
         InterpretationBox[
          StyleBox[
           GraphicsBox[{}, BaselinePosition -> Baseline, ImageSize -> {6, 0}],
            CacheGraphics -> False], 
          Spacer[6]]]], "Related Guides"}]], None}, {None, None}},
 CellFrameLabelMargins->0,
 CellSize->{Inherited, 
   FEPrivate`If[
    FEPrivate`Or[
     FEPrivate`SameQ[FEPrivate`$ProductVersion, "6.0"], 
     FEPrivate`SameQ[FEPrivate`$ProductVersion, "7.0"], 
     FEPrivate`SameQ[FEPrivate`$ProductVersion, "8.0"]], 11, 14]},
 CellID->38303248],

Cell["", "SectionHeaderSpacer",
 Editable->False,
 Selectable->False,
 Deletable->False,
 ShowCellBracket->False,
 ShowSelection->False,
 CellMargins->FEPrivate`If[
   FEPrivate`Or[
    FEPrivate`SameQ[FEPrivate`$ProductVersion, "6.0"], 
    FEPrivate`SameQ[FEPrivate`$ProductVersion, "7.0"], 
    FEPrivate`SameQ[FEPrivate`$ProductVersion, "8.0"]], 0, Inherited],
 CellElementSpacings->{"CellMinHeight"->FEPrivate`If[
   FEPrivate`Or[
    FEPrivate`SameQ[FEPrivate`$ProductVersion, "6.0"], 
    FEPrivate`SameQ[FEPrivate`$ProductVersion, "7.0"], 
    FEPrivate`SameQ[FEPrivate`$ProductVersion, "8.0"]], 1, Inherited]},
 CellSize->FEPrivate`If[
   FEPrivate`Or[
    FEPrivate`SameQ[FEPrivate`$ProductVersion, "6.0"], 
    FEPrivate`SameQ[FEPrivate`$ProductVersion, "7.0"], 
    FEPrivate`SameQ[FEPrivate`$ProductVersion, "8.0"]], {Inherited, 1}, 
   Inherited]],

Cell["", "SectionHeaderSpacer"],

Cell[BoxData[
 TemplateBox[{Cell[
    TextData["Model attributes"]],"paclet:Toolbox/guide/ModelAttributes"},
  "RefLink",
  BaseStyle->"MoreAbout"]], "MoreAbout",
 CellID->1774556688],

Cell["", "SectionFooterSpacer",
 Editable->False,
 Selectable->False,
 Deletable->False,
 ShowCellBracket->False,
 ShowSelection->False,
 CellMargins->FEPrivate`If[
   FEPrivate`Or[
    FEPrivate`SameQ[FEPrivate`$ProductVersion, "6.0"], 
    FEPrivate`SameQ[FEPrivate`$ProductVersion, "7.0"], 
    FEPrivate`SameQ[FEPrivate`$ProductVersion, "8.0"]], 0, Inherited],
 CellElementSpacings->{"CellMinHeight"->FEPrivate`If[
   FEPrivate`Or[
    FEPrivate`SameQ[FEPrivate`$ProductVersion, "6.0"], 
    FEPrivate`SameQ[FEPrivate`$ProductVersion, "7.0"], 
    FEPrivate`SameQ[FEPrivate`$ProductVersion, "8.0"]], 1, Inherited]},
 CellSize->FEPrivate`If[
   FEPrivate`Or[
    FEPrivate`SameQ[FEPrivate`$ProductVersion, "6.0"], 
    FEPrivate`SameQ[FEPrivate`$ProductVersion, "7.0"], 
    FEPrivate`SameQ[FEPrivate`$ProductVersion, "8.0"]], {Inherited, 1}, 
   Inherited]]
}, Open  ]],

Cell[" ", "FooterCell"]
},
Saveable->False,
ScreenStyleEnvironment->"Working",
WindowSize->{725, 750},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
WindowTitle->"Objective",
PrivateNotebookOptions->{"FileOutlineCache"->False},
TaggingRules->{
 "ModificationHighlight" -> False, "ColorType" -> "SymbolColor", "LinkTrails" -> 
  GridBox[{{
      RowBox[{
        ButtonBox[
        "Wolfram Language", ButtonData -> "paclet:guide/WolframRoot", 
         BaseStyle -> {"Link", "DockedLinkTrail"}]}]}}, ColumnAlignments -> 
    Left], "ExampleCounter" -> 1, "NeedPlatMsgIn" -> None, "RootCaptions" -> 
  "", "Metadata" -> {
   "built" -> "{2017, 6, 1, 13, 37, 47.363536}", 
    "history" -> {"0.1", "", "", ""}, "context" -> "Toolbox`", 
    "keywords" -> {}, "specialkeywords" -> {}, 
    "tutorialcollectionlinks" -> {}, "index" -> True, "label" -> 
    "Toolbox Symbol", "language" -> "en", "paclet" -> "Toolbox", "status" -> 
    "None", "summary" -> 
    "Objective specifies either a single flux or a sum of fluxes that will be \
optimized if the the model is used in COBRA related methods.", 
    "synonyms" -> {}, "tabletags" -> {}, "title" -> "Objective", 
    "titlemodifier" -> "", "windowtitle" -> "Objective", "type" -> "Symbol", 
    "uri" -> "Toolbox/ref/Constraints"}, "SearchTextTranslated" -> ""},
CellContext->"Global`",
FrontEndVersion -> "6.0",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[
    StyleDefinitions -> FrontEnd`FileName[{"Wolfram"}, "Reference.nb"]]], 
   Cell[
    StyleData["Input"], CellContext -> "Global`"], 
   Cell[
    StyleData["Output"], CellContext -> "Global`"]}, Visible -> False, 
  FrontEndVersion -> "6.0", 
  StyleDefinitions -> "Default.nb"]
]

